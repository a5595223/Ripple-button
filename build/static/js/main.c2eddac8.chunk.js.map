{"version":3,"sources":["logo.svg","components/button.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Button","props","_useState","useState","toggle","deltaX","deltaY","_useState2","Object","slicedToArray","count","setCount","textInput","React","createRef","react_default","a","createElement","ref","className","onClick","event","_textInput$current$ge","current","getBoundingClientRect","x","y","clientX","clientY","value","onAnimationEnd","style","left","top","App","src_components_button","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+KCsCzBC,MAlCf,SAAgBC,GAAO,IAAAC,EACOC,mBAAS,CAC/BC,QAAQ,EACRC,OAAQ,EACRC,OAAQ,IAJOC,EAAAC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,GACZQ,EADYH,EAAA,GACLI,EADKJ,EAAA,GAMfK,EAAYC,IAAMC,YAkBtB,OACIC,EAAAC,EAAAC,cAAA,UAAQC,IAAKN,EAAWO,UAAU,UAAUC,QAlBtC,SAAUC,GAAO,IAAAC,EACRV,EAAUW,QAAQC,wBAA3BC,EADiBH,EACjBG,EAAGC,EADcJ,EACdI,EACHC,EAAqBN,EAArBM,QAASC,EAAYP,EAAZO,QAIfjB,EAAS,CACLP,QAAQ,EACRC,OALSsB,EAAUF,EAAI,EAMvBnB,OALSsB,EAAUF,EAAI,MAc3B,IAAyDX,EAAAC,EAAAC,cAAA,QAAME,UAAU,SAASlB,EAAM4B,QAClE,IAAjBnB,EAAMN,OAAkBW,EAAAC,EAAAC,cAAA,QAAME,UAAU,SAASW,eAPhD,WACNnB,EAAS,CACLP,QAAQ,KAMJ2B,MAAO,CAAEC,KAAMtB,EAAML,OAAQ4B,IAAKvB,EAAMJ,UACjC,KCjBR4B,MAVf,WACE,OACEnB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACkB,EAAD,CAAQN,MAAM,iBACdd,EAAAC,EAAAC,cAACkB,EAAD,CAAQN,MAAM,iBACdd,EAAAC,EAAAC,cAACkB,EAAD,CAAQN,MAAM,mBCEAO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c2eddac8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { useState } from 'react';\r\nimport './button.css'\r\n\r\nfunction Button(props) {\r\n    const [count, setCount] = useState({\r\n        toggle: false,\r\n        deltaX: 0,\r\n        deltaY: 0,\r\n    });\r\n    let textInput = React.createRef();\r\n    const x = function (event) {\r\n        let { x, y } = textInput.current.getBoundingClientRect()\r\n        let { clientX, clientY } = event\r\n        let deltaX = clientX - x - 5\r\n        let deltaY = clientY - y - 5\r\n\r\n        setCount({\r\n            toggle: true,\r\n            deltaX: deltaX,\r\n            deltaY: deltaY\r\n        })\r\n    }\r\n    const y = function () {\r\n        setCount({\r\n            toggle: false\r\n        })\r\n    }\r\n    return (\r\n        <button ref={textInput} className='button2' onClick={x}> <span className='value'>{props.value}</span>\r\n            {count.toggle === true ? <span className='circle' onAnimationEnd={y}\r\n                style={{ left: count.deltaX, top: count.deltaY }}\r\n            ></span> : ''}\r\n        </ button>\r\n    );\r\n}\r\n\r\n\r\nexport default Button;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Button from './components/button';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Button value='按钮' />\n      <Button value='按钮' />\n      <Button value='按钮' />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}